# -*- coding: utf-8 -*-
"""3 vs 9

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-PITiYdSlLFc4aHiXOTrZHoFL-htcY2
"""

!pip install nepse-scraper xlsxwriter gitpython

import pandas as pd
import numpy as np
import requests
from bs4 import BeautifulSoup
import re
import base64
from datetime import datetime, timedelta

# ===============================
# STEP 1: Get latest CSV from repo
# ===============================
def get_latest_file_url(repo_url):
    response = requests.get(repo_url)
    soup = BeautifulSoup(response.content, 'html.parser')
    file_links = soup.find_all('a', href=True)

    file_urls = {}
    for link in file_links:
        file_name = link['href']
        if file_name.endswith('.csv'):
            date_match = re.search(r'(\d{4}-\d{2}-\d{2})', file_name)
            if date_match:
                file_date = date_match.group(1)
                file_urls[file_date] = repo_url.replace('/tree/', '/raw/') + '/' + file_name

    if not file_urls:
        raise ValueError("No CSV files found in the repository.")

    latest_file_date = max(file_urls.keys())
    return file_urls[latest_file_date]

repo_url = 'https://github.com/iamsrijit/Nepse/tree/main'

latest_file_url = get_latest_file_url(repo_url)
latest_file_url = latest_file_url.replace('/iamsrijit/Nepse/blob/main/', '/')
secondss = pd.read_csv(latest_file_url)

# Standardize columns
secondss.columns = ['Symbol', 'Date', 'Open', 'High', 'Low', 'Close', 'Percent Change', 'Volume']

# ===============================
# STEP 2: Clean & preprocess data
# ===============================
dfs = [secondss]
finall_df = pd.DataFrame()

for df in dfs:
    if 'Date' not in df.columns:
        continue
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce').dt.strftime('%m/%d/%Y')
    df.dropna(subset=['Date'], inplace=True)

combined_df = pd.concat(dfs, ignore_index=True, join='outer')
combined_df['Date'] = pd.to_datetime(combined_df['Date'], format='%m/%d/%Y')

# Remove duplicates per Symbol, Date
for symbol in combined_df['Symbol'].unique():
    symbol_df = combined_df[combined_df['Symbol'] == symbol]
    symbol_df = symbol_df.sort_values(by=['Date'], ascending=False)
    symbol_df = symbol_df.drop_duplicates(subset=['Date'], keep='first')
    finall_df = pd.concat([finall_df, symbol_df], ignore_index=True)

# ===============================
# STEP 3: EMA crossover strategy
# ===============================
finall_df = finall_df.sort_values(by=['Symbol', 'Date'], ascending=[True, True])

results = []
insufficient_data = []

def calculate_ema(prices, span):
    ema = np.full(len(prices), np.nan)
    if len(prices) < span:
        return ema
    ema[span-1] = sum(prices[:span]) / span
    multiplier = 2 / (span + 1)
    for i in range(span, len(prices)):
        ema[i] = (prices[i] - ema[i-1]) * multiplier + ema[i-1]
    return ema

for symbol in finall_df['Symbol'].unique():
    symbol_df = finall_df[finall_df['Symbol'] == symbol].reset_index(drop=True)
    prices = symbol_df['Close'].tolist()

    if len(prices) < 9:
        insufficient_data.append(symbol)
        continue

    ema3 = calculate_ema(prices, 3)
    ema9 = calculate_ema(prices, 9)

    for i in range(1, len(symbol_df)):
        if not np.isnan(ema9[i]) and not np.isnan(ema3[i]) and not np.isnan(ema9[i-1]) and not np.isnan(ema3[i-1]):
            if ema3[i] > ema9[i] and ema3[i - 1] < ema9[i - 1]:
                results.append([symbol, symbol_df['Date'][i], "Buy", symbol_df['Close'][i]])
            elif ema3[i] < ema9[i] and ema3[i - 1] > ema9[i - 1]:
                results.append([symbol, symbol_df['Date'][i], "Sell", symbol_df['Close'][i]])

cross_signals_df = pd.DataFrame(results, columns=['Symbol', 'Date', 'Signal', 'Close'])

# Filter last 300 days
three_hundred_days_ago = datetime.today() - timedelta(days=300)
cross_signals_df['Date'] = pd.to_datetime(cross_signals_df['Date'])
filtered_df = cross_signals_df[cross_signals_df['Date'] >= three_hundred_days_ago]
filtered_df = filtered_df.sort_values(by='Date', ascending=False)

# ===============================
# STEP 4: Upload results to GitHub
# ===============================
try:
    # Convert DataFrame to CSV string
    csv_data = filtered_df.to_csv(index=False)
    csv_data_base64 = base64.b64encode(csv_data.encode()).decode()

    repo = "iamsrijit/Nepse"
    file_name = f'3vs9EMA_Cross_for_{datetime.today().strftime("%Y-%m-%d")}.csv'
    file_path = file_name  # relative path

    import os
token = os.environ.get("GH_TOKEN")  # GitHub Actions will provide this
if not token:
    raise ValueError("No GH_TOKEN found. Did you set secrets in GitHub Actions?")


    upload_url = f'https://api.github.com/repos/{repo}/contents/{file_path}'

    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }

    # First check if file exists
    check_response = requests.get(upload_url, headers=headers)
    if check_response.status_code == 200:
        sha = check_response.json()['sha']  # required for updates
    else:
        sha = None

    payload = {
        'message': f'Upload {file_name}',
        'content': csv_data_base64,
        'branch': 'main'
    }
    if sha:
        payload['sha'] = sha

    response = requests.put(upload_url, headers=headers, json=payload)

    if response.status_code in [200, 201]:
        print(f'✅ File {file_name} uploaded successfully!')
    else:
        print(f'❌ Failed to upload {file_name}. Status: {response.status_code}')
        print('Response:', response.json())

except Exception as e:
    print("An error occurred:", e)